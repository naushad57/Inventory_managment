from flask import *import pymysql as pmdb = pm.connect(host="localhost",                user="root",                password="root",                database="inventory",                port=8889)cursor = db.cursor()app = Flask(__name__)app.secret_key = "xyz123"@app.route("/")def login():    return render_template('login.html')@app.route("/check", methods=['POST'])def check():    name = request.form['name']    pwd = request.form['pwd']       checkq = "SELECT * FROM users WHERE name = '{}' AND password = '{}'".format(name, pwd)    cursor.execute(checkq)    data = cursor.fetchall()    if len(data) > 0:        session['name'] = data[0][1]        return redirect(url_for("allproducts"))    else:        return "Login failed"        @app.route("/logout")def logout():    if 'name' in session:        session.pop('name')        return redirect(url_for("login"))@app.route("/adduser")def adduser():    return render_template("adduser.html")@app.route("/register", methods=["POST"])def register():    name = request.form['name']    pwd = request.form['pwd']    regq = "INSERT into users(name,password) VALUES('{}','{}')".format(name,pwd)    try:        cursor.execute(regq)        db.commit()        return redirect(url_for("login"))    except:        db.rollback()        return "Error in Query"    @app.route("/allproducts")def allproducts():    allpq = "SELECT * FROM products"    cursor.execute(allpq)    result = cursor.fetchall()    return render_template("allproducts.html", data=result)@app.route("/addproducts", methods=["POST"])def addproducts():    date = request.form['date']    product = request.form['product']    info = request.form['info']    units = request.form['units']    unitcost = request.form['unitcost']    cogfs = int(units)*int(unitcost)    #cogs = request.form['cogs']    addpq = "INSERT INTO products(date,product,information,units,unitcost,cogfs) VALUES('{}','{}','{}','{}','{}','{}')".format(date,product,info,units,unitcost,cogfs)    try:        cursor.execute(addpq)        db.commit()        return redirect(url_for("allproducts"))    except:        db.rollback        return "Error in Query"@app.route("/editproducts")def editproducts():    id = request.args['id']    singleqr = "SELECT * FROM products WHERE id = {}".format(id)    cursor.execute(singleqr)    singleres = cursor.fetchone()    return render_template("editproducts.html",singuser = singleres)@app.route("/updateproducts",methods=["POST"])def updateproducts():    date = request.form['date']    product = request.form['product']    info = request.form['info']    units = request.form['units']    unitcost = request.form['unitcost']    cogfs = request.form['cogfs']    #cogs = request.form['cogs']    uid = request.form['uid']    upq = "UPDATE products SET date='{}',product='{}',information='{}',units='{}',unitcost='{}',cogfs='{}' WHERE id = {}".format(date,product,info,units,unitcost,cogfs,uid)    try:            cursor.execute(upq)        db.commit()        return redirect(url_for("allproducts"))    except:        db.rollback()        return "Error in query"@app.route("/dispatched")def dispatched():    id = request.args['id']    delq = "DELETE FROM products WHERE id = {}".format(id)    try:        cursor.execute(delq)        db.commit()        return redirect(url_for("allproducts"))    except:        db.rollback()        return "Error in query"    @app.route("/openinventory")def openinventory():    openinq = "SELECT * FROM inven"    cursor.execute(openinq)    result = cursor.fetchall()    return render_template("allinventory.html", data=result)@app.route("/addinventory", methods=["POST"])def addinventory():    date = request.form['date']    product = request.form['product']    info = request.form['info']    units = request.form['units']    unitcost = request.form['unitcost']    cogfs = request.form['cogfs']    #cogs = request.form['cogs']    addinq = "INSERT INTO inven(date,product,location,qty,rate,total) VALUES('{}','{}','{}','{}','{}','{}')".format(date,product,info,units,unitcost,cogfs)    try:        cursor.execute(addinq)        db.commit()        return redirect(url_for("openinventory"))    except:        db.rollback        return "Error in Query"    @app.route("/editinventory")def editinventory():    id = request.args['id']    singleqr = "SELECT * FROM inven WHERE id = {}".format(id)    cursor.execute(singleqr)    singleres = cursor.fetchone()    return render_template("editinventory.html",singuser = singleres)@app.route("/updateinventory",methods=["POST"])def updateinventory():    date = request.form['date']    product = request.form['product']    info = request.form['info']    units = request.form['units']    unitcost = request.form['unitcost']    cogfs = request.form['cogfs']    #cogs = request.form['cogs']    uid = request.form['uid']    upq = "UPDATE inven SET date='{}',product='{}',location='{}',qty='{}',rate='{}',total='{}' WHERE id = {}".format(date,product,info,units,unitcost,cogfs,uid)    try:            cursor.execute(upq)        db.commit()        return redirect(url_for("openinventory"))    except:        db.rollback()        return "Error in query"    @app.route("/deleteinventory")def deleteinventory():    id = request.args['id']    delq = "DELETE FROM inven WHERE id = {}".format(id)    try:        cursor.execute(delq)        db.commit()        return redirect(url_for("openinventory"))    except:        db.rollback()        return "Error in query"if __name__ == "__main__":    app.run(debug=True)    